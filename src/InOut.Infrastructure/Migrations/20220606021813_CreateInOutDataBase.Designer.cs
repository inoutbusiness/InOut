// <auto-generated />
using InOut.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InOut.Infrastructure.Migrations
{
    [DbContext(typeof(InOutContext))]
    [Migration("20220606021813_CreateInOutDataBase")]
    partial class CreateInOutDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InOut.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("VARCHAR(220)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("VARCHAR(90)")
                        .HasColumnName("Password");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("InOut.Domain.Entities.Billing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CoupomId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CustomerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(120)
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CoupomId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Billings", (string)null);
                });

            modelBuilder.Entity("InOut.Domain.Entities.Business", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("VARCHAR(220)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Businesses", (string)null);
                });

            modelBuilder.Entity("InOut.Domain.Entities.BusinessBilling", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BillingId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("BusinessId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("BillingId");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessBillings");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Coupom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BillingId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("VARCHAR(220)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Quantity")
                        .HasMaxLength(120)
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Quantity");

                    b.Property<short>("UnitOfMeasurement")
                        .HasMaxLength(120)
                        .HasColumnType("SMALLINT")
                        .HasColumnName("UnitOfMeasurement");

                    b.HasKey("Id");

                    b.HasIndex("BillingId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("InOut.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("CpfCnpj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("VARCHAR(120)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("VARCHAR(13)")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InOut.Domain.Entities.UserBusiness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BusinessId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("PersonId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("PersonId");

                    b.ToTable("UserBusinesses");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Account", b =>
                {
                    b.HasOne("InOut.Domain.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("InOut.Domain.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Billing", b =>
                {
                    b.HasOne("InOut.Domain.Entities.Coupom", "Coupom")
                        .WithMany("Billings")
                        .HasForeignKey("CoupomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InOut.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupom");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InOut.Domain.Entities.BusinessBilling", b =>
                {
                    b.HasOne("InOut.Domain.Entities.Billing", "Billing")
                        .WithMany()
                        .HasForeignKey("BillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InOut.Domain.Entities.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Billing");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Product", b =>
                {
                    b.HasOne("InOut.Domain.Entities.Billing", "Billing")
                        .WithMany("Products")
                        .HasForeignKey("BillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("InOut.Domain.Entities.UserBusiness", b =>
                {
                    b.HasOne("InOut.Domain.Entities.Business", "Business")
                        .WithMany("PersonBusinesses")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InOut.Domain.Entities.User", "Person")
                        .WithMany("UserBusinesses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Billing", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Business", b =>
                {
                    b.Navigation("PersonBusinesses");
                });

            modelBuilder.Entity("InOut.Domain.Entities.Coupom", b =>
                {
                    b.Navigation("Billings");
                });

            modelBuilder.Entity("InOut.Domain.Entities.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("UserBusinesses");
                });
#pragma warning restore 612, 618
        }
    }
}
